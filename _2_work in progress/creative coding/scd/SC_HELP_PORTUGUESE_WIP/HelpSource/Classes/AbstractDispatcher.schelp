CLASSE:: AbstractDispatcher
summário:: Converte mensages de input em funções
categorias:: External Control>Classes abstractas
relcionado:: Classes/AbstractWrappingDispatcher, Classes/OSCMessageDispatcher, Classes/OSCMessagePatternDispatcher, Classes/MIDIMessageDispatcher, Classes/OSCFunc, Classes/OSCdef, Classes/MIDIFunc, Classes/MIDIdef, Classes/AbstractResponderFunc

DESCRIÇÃO::
A instanciação do AbstractDispatcher permite convter mensagens de input (por exemplo: MIDI, OSC), de modo a criar funções, usando, por pré-definição, o link::Classes/AbstractResponderFunc:: AbstractResponderFunc. Por pré-definição haverá um dispater pré-definido para cada tipo de mensagem, mas mas uma mensagem pode ter múltiplos dispatchers por tipo de modo a implementar grupos customizados de dispatching para grupos de ResponderFuncs. (O principal exemplo disto é um pattern de OSC - Open Sound Control - correspondente com link::Classes/OSCMessagePatternDispatcher::). Normalmente os utilizadores não precisam de aceder às intanciações do dispatcher directamente.


Os Dispatchers têm que ser registados no pont central apropriado (por exemplo: Main:recvOSCfunc para mensagens OSC). Nesta capacidade, os seus interfaces fazem mimiking  link::Classes/Function:: e link::Classes/FunctionList::.


MÉTODOS DE CLASSES::
privado:: initClass

MÈTODO:: all
extrai uma colecção de todos os dispatcher activos no preciso momento.

DEVOLVE:: Um link::Classes/IdentitySet::.

MÉTODO:: new
Cria um novo dispatcher.

devolve:: Uma nova instância.


MÈTODOSDEINSTANCIA::
private:: init

MÈTODO:: add
Adiciona uma responder func a este dispatcher. As subclasses devem fazer override, de modo a manter apenas a informação relevante armazenada em memória. Por norma, este método deveria adicionar este dispatcher como algo dependente da responder func, para que este responda a quaisquer alterações feitas.

argumento:: funcProxy
uma instância da subclasse da ligação::Classes/AbstractResponderFunc:: para adicionar.
An instance of a subclass of link::Classes/AbstractResponderFunc:: to add.

MÉTODO:: remove
Remove a responder func from this dispatcher.

argumenot:: funcProxy
Uma instância da subclasse da ligação::Classes/AbstractResponderFunc:: para remover.

MÉTODO:: value
Avalia a mensagem de entrada para ver se corresponde. As subclasses devem sobrepor esta mensagem para tomar os argumentos apropriados. Seuma reponder func correspondente for encontrada, este método permite chamar valor nesta, e passar a mensagem.

MÉTODO:: valueArray
Uma ligação::#-value:: acima, mas com os argumentos passsados como único ligação::Classes/Array::. Este método é necessário para que as subclasses possam trabalhar em FuncionLists num registo de mensagem central a apontar para Main:recvOSCMessage.

argumento:: args
Um Link::Claases/array:: contendo a mensagem e os argumentos apropriados.

MÈTODO:: register
Regista este dispatcher como um ponto central apropriado (ex: Main:recvOSCfun) para receber o seu tipo de mensagem. As subclasses devem tomar conta para não se sobrepor umas às outras em qualquer registo de object. (Como por exemplo usar a Main::addOSCFunc) para mensagens OSC mais do que para M Main:recvOSCfunc_.) Normalmente falando, os dispatchers devem ser eles mesmos registados automaticamentey se necesário quando uma responder func for adicionada.

MÈTODO:: unregister
Remove este dispatcher do ponto de registo central apropriado, como por exemplo desactivá-lo. Normalmente falando, o dispatcher poderá desregistar ele mesmo automaticamente, quando asua última responder func for removida.

MÉTODO:: free
ligação::#-unregister:: a este dispatcher e remove-lo da ligação::#*all::. Depois este dispatcher deve ser descartado.

MÉTODO:: typeKey
As subclasses devem sobrepor este método para devolver uma chave indicando o tipo de mensagem a que este dispatcher responde, por exemplo código::'OSC Matched':: ou code::'controlo MIDI'::.

devolve:: Um Link::Classes/Símbolo::.

MÉTODO:: actualizar
As subclasses devem sobrepor-se a isto para fazer qualquer coisa necessária para actualizar quando os responders das dispatchers func indicarem que foram mudados através dos mecanismos de dependência estandardizados. A implemeentação pré-definida não faz nada.
