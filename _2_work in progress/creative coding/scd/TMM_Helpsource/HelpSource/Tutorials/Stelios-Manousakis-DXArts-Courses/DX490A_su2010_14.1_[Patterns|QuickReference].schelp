{\rtf1\ansi\ansicpg1253\cocoartf949\cocoasubrtf540
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 LucidaGrande;}
{\colortbl;\red255\green255\blue255;\red168\green34\blue14;\red0\green24\blue232;\red0\green19\blue187;
}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc2\leveljcn2\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid0\'02\'05.;}{\levelnumbers\'01;}}{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc2\leveljcn2\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid0\'02\'05.;}{\levelnumbers\'01;}}{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc2\leveljcn2\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid0\'02\'05.;}{\levelnumbers\'01;}}{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc2\leveljcn2\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid0\'02\'05.;}{\levelnumbers\'01;}}{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc2\leveljcn2\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid0\'02\'05.;}{\levelnumbers\'01;}}{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc2\leveljcn2\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid0\'02\'05.;}{\levelnumbers\'01;}}{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc2\leveljcn2\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid0\'02\'05.;}{\levelnumbers\'01;}}{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc2\leveljcn2\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid0\'02\'05.;}{\levelnumbers\'01;}}{\listname ;}\listid8}
{\list\listtemplateid9\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc2\leveljcn2\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid0\'02\'05.;}{\levelnumbers\'01;}}{\listname ;}\listid9}
{\list\listtemplateid10\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc2\leveljcn2\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid0\'02\'05.;}{\levelnumbers\'01;}}{\listname ;}\listid10}
{\list\listtemplateid11\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc2\leveljcn2\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid0\'02\'05.;}{\levelnumbers\'01;}}{\listname ;}\listid11}
{\list\listtemplateid12\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc2\leveljcn2\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid0\'02\'05.;}{\levelnumbers\'01;}}{\listname ;}\listid12}
{\list\listtemplateid13\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc2\leveljcn2\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid0\'02\'05.;}{\levelnumbers\'01;}}{\listname ;}\listid13}
{\list\listtemplateid14\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc2\leveljcn2\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid0\'02\'05.;}{\levelnumbers\'01;}}{\listname ;}\listid14}
{\list\listtemplateid15\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc2\leveljcn2\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid0\'02\'05.;}{\levelnumbers\'01;}}{\listname ;}\listid15}
{\list\listtemplateid16\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc2\leveljcn2\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid0\'02\'05.;}{\levelnumbers\'01;}}{\listlevel\levelnfc23\levelnfcn23\leveljc2\leveljcn2\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid1\'02\'05.;}{\levelnumbers\'01;}}{\listname ;}\listid16}
{\list\listtemplateid17\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc2\leveljcn2\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid0\'02\'05.;}{\levelnumbers\'01;}}{\listname ;}\listid17}
{\list\listtemplateid18\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc2\leveljcn2\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid0\'02\'05.;}{\levelnumbers\'01;}}{\listname ;}\listid18}
{\list\listtemplateid19\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc2\leveljcn2\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid0\'02\'05.;}{\levelnumbers\'01;}}{\listname ;}\listid19}
{\list\listtemplateid20\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc2\leveljcn2\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid0\'02\'05.;}{\levelnumbers\'01;}}{\listname ;}\listid20}
{\list\listtemplateid21\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc2\leveljcn2\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid0\'02\'05.;}{\levelnumbers\'01;}}{\listname ;}\listid21}
{\list\listtemplateid22\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc2\leveljcn2\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid0\'02\'05.;}{\levelnumbers\'01;}}{\listname ;}\listid22}
{\list\listtemplateid23\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc2\leveljcn2\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid0\'02\'05.;}{\levelnumbers\'01;}}{\listname ;}\listid23}
{\list\listtemplateid24\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc2\leveljcn2\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid0\'02\'05.;}{\levelnumbers\'01;}}{\listname ;}\listid24}
{\list\listtemplateid25\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc2\leveljcn2\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid0\'02\'05.;}{\levelnumbers\'01;}}{\listname ;}\listid25}
{\list\listtemplateid26\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc2\leveljcn2\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid0\'02\'05.;}{\levelnumbers\'01;}}{\listname ;}\listid26}
{\list\listtemplateid27\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc2\leveljcn2\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid0\'02\'05.;}{\levelnumbers\'01;}}{\listname ;}\listid27}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}{\listoverride\listid9\listoverridecount0\ls9}{\listoverride\listid10\listoverridecount0\ls10}{\listoverride\listid11\listoverridecount0\ls11}{\listoverride\listid12\listoverridecount0\ls12}{\listoverride\listid13\listoverridecount0\ls13}{\listoverride\listid14\listoverridecount0\ls14}{\listoverride\listid15\listoverridecount0\ls15}{\listoverride\listid16\listoverridecount0\ls16}{\listoverride\listid17\listoverridecount0\ls17}{\listoverride\listid18\listoverridecount0\ls18}{\listoverride\listid19\listoverridecount0\ls19}{\listoverride\listid20\listoverridecount0\ls20}{\listoverride\listid21\listoverridecount0\ls21}{\listoverride\listid22\listoverridecount0\ls22}{\listoverride\listid23\listoverridecount0\ls23}{\listoverride\listid24\listoverridecount0\ls24}{\listoverride\listid25\listoverridecount0\ls25}{\listoverride\listid26\listoverridecount0\ls26}{\listoverride\listid27\listoverridecount0\ls27}}
\deftab560
\pard\pardeftab560\ql\qnatural

\f0\b\fs32 \cf0 Quick reference\
\pard\pardeftab560\ql\qnatural

\i\fs20 \cf0 (collected from James Harkins' tutorial)
\i0\b0\fs32 \
\pard\pardeftab560\ql\qnatural

\fs24 \cf0 \

\b Primary Patterns
\b0 \
\
\pard\tx220\tx720\pardeftab560\li720\fi-720\ql\qnatural
\ls1\ilvl0
\b \cf2 {\listtext	\'95	}* \cf0 Pseq(list, repeats, offset):
\b0  Play through the entire list 'repeats' times. Like list.do.\
\ls1\ilvl0
\b \cf2 {\listtext	\'95	}* \cf0 Prand(list, repeats):
\b0  Choose items from the list randomly (same as list.choose).\
\ls1\ilvl0
\b \cf2 {\listtext	\'95	}* \cf0 Pxrand(list, repeats):
\b0  Choose randomly, but never repeat the same item twice.\
\ls1\ilvl0
\b \cf2 {\listtext	\'95	}* \cf0 Pshuf(list, repeats):
\b0  Shuffle the list in random order, and use the same random order 'repeats' times. Like list.scramble.\
\ls1\ilvl0
\b \cf2 {\listtext	\'95	}* \cf0 Pwrand(list, weights, repeats):
\b0  Choose randomly by weighted probabilities (like list.wchoose(weights)).\
\pard\pardeftab560\ql\qnatural
\cf0 \
\pard\tx220\tx720\pardeftab560\li720\fi-720\ql\qnatural
\ls2\ilvl0
\b \cf2 {\listtext	\'95	}* \cf0 Pseries(start, step, length):
\b0  Arithmetic series (addition).\
\ls2\ilvl0
\b \cf2 {\listtext	\'95	}* \cf0 Pgeom(start, grow, length):
\b0  Geometric series (multiplication).\
\pard\pardeftab560\ql\qnatural
\cf0 \
\pard\tx220\tx720\pardeftab560\li720\fi-720\ql\qnatural
\ls3\ilvl0
\b \cf2 {\listtext	\'95	}* \cf0 Pwhite(lo, hi, length):
\b0  Random numbers, equal distribution ("white noise"). Like rrand(lo, hi).\
\ls3\ilvl0
\b \cf2 {\listtext	\'95	}* \cf0 Pexprand(lo, hi, length):
\b0  Random numbers, exponential distribution. Like exprand(lo, hi).\
\ls3\ilvl0
\b \cf2 {\listtext	\'95	}* \cf0 Pbrown(lo, hi, step, length):
\b0  Brownian motion, arithmetic scale (addition).\
\pard\pardeftab560\ql\qnatural
\cf0 \
\pard\tx220\tx720\pardeftab560\li720\fi-720\ql\qnatural
\ls4\ilvl0
\b \cf2 {\listtext	\'95	}* \cf0 Pfunc(nextFunc, resetFunc):
\b0  Get the stream values from a user-supplied function.\
\ls4\ilvl0
\b \cf2 {\listtext	\'95	}* \cf0 Pfuncn(func, repeats):
\b0  Get values from the function, but stop after 'repeats' items.\
\ls4\ilvl0
\b \cf2 {\listtext	\'95	}* \cf0 Proutine(routineFunc):
\b0  Use the function like a routine. The function should return values using .yield or .embedInStream.\
\pard\pardeftab560\ql\qnatural
\cf0 \
\

\b Additional List Patterns
\b0 \
\
\pard\tx220\tx720\pardeftab560\li720\fi-720\ql\qnatural
\ls5\ilvl0
\b \cf0 {\listtext	\'95	}Pser(list, repeats, offset):
\b0  Play through the list as many times as needed, but output only 'repeats' items.\
\ls5\ilvl0
\b {\listtext	\'95	}Pslide(list, repeats, len, step, start, wrapAtEnd):
\b0  Play overlapping segments from the list.\
\pard\pardeftab560\ql\qnatural
\cf0 \
\pard\tx220\tx720\pardeftab560\li720\fi-720\ql\qnatural
\ls6\ilvl0
\b \cf0 {\listtext	\'95	}Pwalk(list, stepPattern, directionPattern, startPos):
\b0  Random walk over the list.\
\pard\pardeftab560\ql\qnatural
\cf0 \
\pard\tx220\tx720\pardeftab560\li720\fi-720\ql\qnatural
\ls7\ilvl0
\b \cf0 {\listtext	\'95	}Place(list, repeats, offset):
\b0  Interlace any arrays found in the main list.\
\ls7\ilvl0
\b {\listtext	\'95	}Ppatlace(list, repeats, offset):
\b0  Interlace any patterns found in the main list.\
\ls7\ilvl0
\b {\listtext	\'95	}Ptuple(list, repeats):
\b0  Collect the list items into an array as the return value.\
\pard\pardeftab560\ql\qnatural
\cf0 \
\

\b Additional Random Number Generators
\b0 \
\
\pard\tx220\tx720\pardeftab560\li720\fi-720\ql\qnatural
\ls8\ilvl0
\b \cf0 {\listtext	\'95	}Pgbrown(lo, hi, step, length):
\b0  Brownian motion, geometric scale (multiplication).\
\pard\pardeftab560\ql\qnatural
\cf0 \
\pard\tx220\tx720\pardeftab560\li720\fi-720\ql\qnatural
\ls9\ilvl0
\b \cf0 {\listtext	\'95	}Pbeta(lo, hi, prob1, prob2, length):
\b0  Beta distribution, where prob1 = \uc0\u945  (alpha) and prob2 = \u946  (beta).\
\ls9\ilvl0
\b {\listtext	\'95	}Pcauchy(mean, spread, length):
\b0  Cauchy distribution.\
\ls9\ilvl0
\b {\listtext	\'95	}Pgauss(mean, dev, length):
\b0  Guassian (normal) distribution.\
\ls9\ilvl0
\b {\listtext	\'95	}Phprand(lo, hi, length):
\b0  Returns the greater of two equal-distribution random numbers.\
\ls9\ilvl0
\b {\listtext	\'95	}Plprand(lo, hi, length):
\b0  Returns the lesser of two equal-distribution random numbers.\
\ls9\ilvl0
\b {\listtext	\'95	}Pmeanrand(lo, hi, length):
\b0  Returns the average of two equal-distribution random numbers, i.e., (x +  y) / 2.\
\ls9\ilvl0
\b {\listtext	\'95	}Ppoisson(mean, length):
\b0  Poisson distribution.\
\pard\pardeftab560\ql\qnatural
\cf0 \
\pard\tx220\tx720\pardeftab560\li720\fi-720\ql\qnatural
\ls10\ilvl0
\b \cf0 {\listtext	\'95	}Pprob(distribution, lo, hi, length, tableSize):
\b0  Arbitrary distribution, based on a probability table.\
\pard\pardeftab560\ql\qnatural
\cf0 \

\b Random numbers and probability distributions
\b0 \
\
\pard\tx220\tx720\pardeftab560\li720\fi-720\ql\qnatural
\ls11\ilvl0
\b \cf0 {\listtext	\'95	}Pwhite(lo, hi, length):
\b0  Produces 'length' random numbers with equal distribution ('white' refers to white noise).\
\ls11\ilvl0
\b {\listtext	\'95	}Pexprand(lo, hi, length):
\b0  Same, but the random numbers have an exponential distribution, favoring lower numbers. This is good for frequencies, and also durations (because you need more notes with a shorter duration to balance the weight of longer notes).\
\ls11\ilvl0
\b {\listtext	\'95	}Pbrown(lo, hi, step, length):
\b0  Brownian motion. Each value adds a random step to the previous value, where the step has an equal distribution between -step and +step.\
\ls11\ilvl0
\b {\listtext	\'95	}Pgbrown(lo, hi, step, length):
\b0  Brownian motion on a geometric scale. Each value multiplies a random step factor to the previous value.\
\pard\pardeftab560\ql\qnatural
\cf0 \
\pard\tx220\tx720\pardeftab560\li720\fi-720\ql\qnatural
\ls12\ilvl0
\b \cf0 {\listtext	\'95	}Pbeta(lo, hi, prob1, prob2, length):
\b0  Beta distribution, where prob1 = \uc0\u945  (alpha) and prob2 = \u946  (beta).\
\ls12\ilvl0
\b {\listtext	\'95	}Pcauchy(mean, spread, length):
\b0  Cauchy distribution.\
\ls12\ilvl0
\b {\listtext	\'95	}Pgauss(mean, dev, length):
\b0  Guassian (normal) distribution.\
\ls12\ilvl0
\b {\listtext	\'95	}Phprand(lo, hi, length):
\b0  Returns the greater of two equal-distribution random numbers.\
\ls12\ilvl0
\b {\listtext	\'95	}Plprand(lo, hi, length):
\b0  Returns the lesser of two equal-distribution random numbers.\
\ls12\ilvl0
\b {\listtext	\'95	}Pmeanrand(lo, hi, length):
\b0  Returns the average of two equal-distribution random numbers, i.e., (x + y) / 2.\
\ls12\ilvl0
\b {\listtext	\'95	}Ppoisson(mean, length):
\b0  Poisson distribution.\
\pard\pardeftab560\ql\qnatural
\cf0 \
\pard\tx220\tx720\pardeftab560\li720\fi-720\ql\qnatural
\ls13\ilvl0
\b \cf0 {\listtext	\'95	}Pprob(distribution, lo, hi, length, tableSize):
\b0  Given an array of relative probabilities across the desired range (a histogram) representing an arbitrary distribution, generates random numbers corresponding to that distribution.\
\pard\tx220\tx720\pardeftab560\li720\fi-720\ql\qnatural
\ls13\ilvl0
\b\fs28 \cf3 \
\pard\tx220\tx720\pardeftab560\li720\fi-720\ql\qnatural
\ls13\ilvl0{\field{\*\fldinst{HYPERLINK "file:///Applications/SuperCollider/Help/Streams-Patterns-Events/A%20Practical%20Guide/PG_06a_Repetition_Contraint_Patterns.html"}}{\fldrslt \cf3 Repetition and Constraint patterns}}
\b0 \cf4 \
\pard\pardeftab560\ql\qnatural

\fs24 \cf0 \
\pard\tx220\tx720\pardeftab560\li720\fi-720\ql\qnatural
\ls14\ilvl0
\b \cf0 {\listtext	\'95	}Pclutch(pattern, connected):
\b0  If the 'connected' pattern is true, Pclutch returns the next value from 'pattern'. If 'connected' is false, the previous pattern value is repeated. It's like a clutch in a car: when engaged, the pattern moves forward; when disconnected, it stays where it is.\
\ls14\ilvl0
\b {\listtext	\'95	}Pn(pattern, repeats):
\b0  Embeds the source pattern 'repeats' times: simple repetition. This also works on single values: Pn(1, 5) outputs the number 1 5 times.\
\ls14\ilvl0
\b {\listtext	\'95	}Pstutter(n, pattern):
\b0  'n' and 'pattern' are both patterns. Each value from 'pattern' is repeated 'n' times. If 'n' is a pattern, each value can be repeated a different number of times.\
\ls14\ilvl0
\b {\listtext	\'95	}PdurStutter(n, pattern):
\b0  Like Pstutter, except the pattern value is divided by the number of repeats (so that the total time for the repeat cycle is the duration value from the source pattern).\
\pard\pardeftab560\ql\qnatural
\cf0 \
\pard\tx220\tx720\pardeftab560\li720\fi-720\ql\qnatural
\ls15\ilvl0
\b \cf0 {\listtext	\'95	}Pfin(count, pattern): 
\b0 Returns exactly 'count' values from the source pattern, then stops.\
\ls15\ilvl0
\b {\listtext	\'95	}Pconst(sum, pattern, tolerance):
\b0  Output numbers until the sum reaches a predefined limit. The last output value is adjusted so that the sum matches the limit exactly.\
\ls15\ilvl0
\b {\listtext	\'95	}Pfindur(dur, pattern, tolerance):
\b0  Like Pconst, but applying the "constrain" behavior to the event's rhythmic values. The source pattern runs up to the specified duration, then stops. This is very useful if you know how long a musical behavior should go on, but the number of events to fill up that time is not known.\
\ls15\ilvl0
\b {\listtext	\'95	}Psync(pattern, quant, maxdur, tolerance):
\b0  Like Pfindur, but does not have a fixed duration limit. Instead, it plays until either it reaches maxdur (in which case it behaves like Pfindur, adjusting the last event so the total duration matches maxdur), or the pattern stops early and the last event is rounded up to the next integer multiple of quant.\
\pard\pardeftab560\ql\qnatural
\cf0 \
\
\pard\pardeftab560\ql\qnatural
{\field{\*\fldinst{HYPERLINK "file:///Applications/SuperCollider/Help/Streams-Patterns-Events/A%20Practical%20Guide/PG_06b_Time_Based_Patterns.html"}}{\fldrslt 
\b\fs28 \cf3 Time-based patterns}}
\fs28 \cf4 \
\pard\pardeftab560\ql\qnatural

\fs24 \cf0 \
\pard\tx220\tx720\pardeftab560\li720\fi-720\ql\qnatural
\ls16\ilvl0
\b \cf0 {\listtext	\'95	}Ptime(repeats):
\b0  Returns the amount of time elapsed since embedding.\
\ls16\ilvl0
\b {\listtext	\'95	}Pstep(levels, durs, repeats):
\b0  Repeat a 'level' value for its corresponding duration, then move to the next.\
\ls16\ilvl0
\b {\listtext	\'95	}Pseg(levels, durs, curves, repeats):
\b0  Similar to Pstep, but interpolates to the next value instead of stepping abruptly at the end of the duration. Interpolation is linear by default, but any envelope segment curve can be used. Levels, durs and curves should be patterns.\
\pard\tx940\tx1440\pardeftab560\li1440\fi-1440\ql\qnatural
\ls16\ilvl1\cf0 {\listtext	
\f1 \uc0\u9702 
\f0 	}Related: Use of {\field{\*\fldinst{HYPERLINK "file:///Applications/SuperCollider/Help/Control/Env.html"}}{\fldrslt \cf4 Env}} as a pattern.\
\pard\pardeftab560\ql\qnatural
\cf0 \
\
\pard\pardeftab560\ql\qnatural
{\field{\*\fldinst{HYPERLINK "file:///Applications/SuperCollider/Help/Streams-Patterns-Events/A%20Practical%20Guide/PG_06c_Composition_of_Patterns.html"}}{\fldrslt 
\b\fs28 \cf3 Adding values into event patterns}}
\fs28 \cf4 \
\pard\pardeftab560\ql\qnatural

\b\fs24 \cf0 (Or, "Pattern Composition")
\b0 \
\
\pard\tx220\tx720\pardeftab560\li720\fi-720\ql\qnatural
\ls17\ilvl0
\b \cf0 {\listtext	\'95	}Pbindf(pattern, pairs):
\b0  Adds new key-value pairs onto a pre-existing Pbind-style pattern.\
\ls17\ilvl0
\b {\listtext	\'95	}Pchain(patterns):
\b0  Chains separate Pbind-style patterns together, so that all their key-value pairs go into the same event.\
\pard\pardeftab560\ql\qnatural
\cf0 \
\
\pard\pardeftab560\ql\qnatural
{\field{\*\fldinst{HYPERLINK "file:///Applications/SuperCollider/Help/Streams-Patterns-Events/A%20Practical%20Guide/PG_06d_Parallel_Patterns.html"}}{\fldrslt 
\b\fs28 \cf3 Parallelizing event patterns}}
\fs28 \cf4 \
\pard\pardeftab560\ql\qnatural

\fs24 \cf0 \
\pard\tx220\tx720\pardeftab560\li720\fi-720\ql\qnatural
\ls18\ilvl0
\b \cf0 {\listtext	\'95	}Ppar(list, repeats):
\b0  Start each of the event patterns in the 'list' at the same time. When the last one finishes, the Ppar also stops. If repeats > 1, all the subpatterns start over again from the beginning.\
\ls18\ilvl0
\b {\listtext	\'95	}Ptpar(list, repeats):
\b0  Here, the list consists of [timeOffset0, pattern0, timeOffset1, pattern1...]. Each pattern starts after the number of beats given as its time offset. The patterns can start at different times relative to each other.\
\ls18\ilvl0
\b {\listtext	\'95	}Pgpar(list, repeats):
\b0  Like Ppar, but it creates a separate group for each subpattern.\
\ls18\ilvl0
\b {\listtext	\'95	}Pgtpar(list, repeats):
\b0  This is supposed to be like Ptpar with separate groups for the sub patterns, but the class is currently broken.\
\pard\pardeftab560\ql\qnatural
\cf0 \
\pard\tx220\tx720\pardeftab560\li720\fi-720\ql\qnatural
\ls19\ilvl0
\b \cf0 {\listtext	\'95	}Pspawner(routineFunc):
\b0  The function is used to make a routine. A Spawner object gets passed into this routine, and this object is used to add or remove streams to/from the parallel stream. New patterns can be added in sequence or in parallel.\
\ls19\ilvl0
\b {\listtext	\'95	}Pspawn(pattern, spawnProtoEvent):
\b0  Supports most of the features of Pspawner, but uses a pattern to control the Spawner object instead of a routine function.\
\pard\pardeftab560\ql\qnatural
\cf0 \
\
\pard\pardeftab560\ql\qnatural
{\field{\*\fldinst{HYPERLINK "file:///Applications/SuperCollider/Help/Streams-Patterns-Events/A%20Practical%20Guide/PG_06e_Language_Control.html"}}{\fldrslt 
\b\fs28 \cf3 Language control methods}}
\fs28 \cf4 \
\pard\pardeftab560\ql\qnatural

\fs24 \cf0 \
Some patterns mimic language-style control methods: conditionals (Pif), loops (Pwhile) and error cleanup (Pprotect).\
\
\pard\tx220\tx720\pardeftab560\li720\fi-720\ql\qnatural
\ls20\ilvl0
\b \cf0 {\listtext	\'95	}Pif(condition, iftrue, iffalse, default):
\b0  Evaluates a pattern 'condition' that returns true or false. Then, one value is taken from the true or false branch before going back to evaluate the condition again. The 'default' value or pattern comes into play when the true or false branch stops producing values (returns nil). If the default is not given, Pif returns control to the parent upon nil from either branch.\
\ls20\ilvl0
\b {\listtext	\'95	}Pseed(randSeed, pattern):
\b0  Random number generators depend on seed values; setting a specific seed produces a repeatable stream of pseudorandom numbers. Pseed sets the random seed before embedding 'pattern', effectively restarting the random number generator at the start of the pattern.\
\ls20\ilvl0
\b {\listtext	\'95	}Pprotect(pattern, func):
\b0  Like the 'protect' error handling method, if an error occurs while getting the next value from the pattern, the function will be evaluated before the error interrupts execution.\
\ls20\ilvl0
\b {\listtext	\'95	}Ptrace(pattern, key, printStream, prefix):
\b0  For debugging, Ptrace prints every return value. Is your pattern really doing what you think? This will tell you. A Ptrace is created automatically by the 'trace' message: aPattern.trace(key, printStream, prefix) --> Ptrace(aPattern, key, printStream, prefix).\
\ls20\ilvl0
\b {\listtext	\'95	}Pwhile(func, pattern):
\b0  Like {\field{\*\fldinst{HYPERLINK "file:///Applications/SuperCollider/Help/Language/Control-Structures.html"}}{\fldrslt \cf3 \ul \ulc3 while}}: as long as the function evaluates to true, the pattern is embedded. The function is checked once at the beginning and thereafter when the pattern comes to an end. If it's applied to an infinite pattern, there's no looping because the pattern never gives control back.\
\pard\pardeftab560\ql\qnatural
\cf0 \
\
\pard\pardeftab560\ql\qnatural
{\field{\*\fldinst{HYPERLINK "file:///Applications/SuperCollider/Help/Streams-Patterns-Events/A%20Practical%20Guide/PG_06f_Server_Control.html"}}{\fldrslt 
\b\fs28 \cf3 Server control methods}}
\fs28 \cf4 \
\pard\pardeftab560\ql\qnatural

\fs24 \cf0 \
\pard\tx220\tx720\pardeftab560\li720\fi-720\ql\qnatural
\ls21\ilvl0
\b \cf0 {\listtext	\'95	}Pbus(pattern, dur, fadeTime, numChannels, rate):
\b0  Creates a private group and bus for the synths played by the pattern. The group and bus are released when the pattern stops. Useful for isolating signals from different patterns.\
\ls21\ilvl0
\b {\listtext	\'95	}Pgroup(pattern):
\b0  Creates a private group (without private bus) for the pattern's synths.\
\pard\pardeftab560\ql\qnatural
\cf0 \
\pard\tx220\tx720\pardeftab560\li720\fi-720\ql\qnatural
\ls22\ilvl0
\b \cf0 {\listtext	\'95	}Pfx(pattern, fxname, pairs)
\b0 \
\ls22\ilvl0
\b {\listtext	\'95	}Pfxb(pattern, fxname, pairs):
\b0  Both of these patterns play an effect synth at the tail of the target group. This synth should read from the bus identified by the 'out' argument, and write the processed signal onto the same bus using either ReplaceOut or XOut. Pfx uses whatever bus and group are specified in the incoming event. Pfxb allocates a separate bus and group for the effect and the pattern.\
\pard\pardeftab560\ql\qnatural
\cf0 \
\pard\tx220\tx720\pardeftab560\li720\fi-720\ql\qnatural
\ls23\ilvl0
\b \cf0 {\listtext	\'95	}Pproto(makeFunction, pattern, cleanupFunc):
\b0  Allocate resources on the server and add references to them into the event prototype used to play 'pattern'. When the pattern stops (or is stopped), the resources can be removed automatically.\
\pard\pardeftab560\ql\qnatural
\cf0 \
\
\pard\pardeftab560\ql\qnatural
{\field{\*\fldinst{HYPERLINK "file:///Applications/SuperCollider/Help/Streams-Patterns-Events/A%20Practical%20Guide/PG_06g_Data_Sharing.html"}}{\fldrslt 
\b\fs28 \cf3 Data sharing}}
\fs28 \cf4 \
\pard\pardeftab560\ql\qnatural

\fs24 \cf0 \
\pard\tx220\tx720\pardeftab560\li720\fi-720\ql\qnatural
\ls24\ilvl0
\b \cf0 {\listtext	\'95	}Pkey(key):
\b0  Read the 'key' in the input event, making previously-calculated values available for other streams.\
\ls24\ilvl0
\b {\listtext	\'95	}Penvir(envir, pattern, independent):
\b0  Run the pattern inside a given environment.\
\ls24\ilvl0
\b {\listtext	\'95	}Pfset(func, pattern):
\b0  Assign default values into the input event before getting each result event out of the given pattern.\
\ls24\ilvl0
\b {\listtext	\'95	}Plambda(pattern, scope):
\b0  Creates a "function scope" into which values are assigned using Plet, and from which values are retrieved with Pget. Pget is somewhat like Pkey, except that its scope is strictly internal, hidden from the caller. With Pkey, the source values remain present in the event returned to the caller.\
\
\pard\pardeftab560\ql\qnatural

\b\fs28 \cf0 \
\
Pset and cousins
\b0 \

\fs24 \
A group of pattern classes allow single event keys to be overwritten, or one addition or multiplication to be performed. Pkey, in combination with the Pchain or Pbindf "pattern composition" classes, can do everything the following classes can do (though this alternate notation may be more convenient in certain cases).\
\
\pard\tx220\tx720\pardeftab560\li720\fi-720\ql\qnatural
\ls25\ilvl0
\b \cf0 {\listtext	\'95	}Pset(name, value, pattern):
\b0  Get one event from 'pattern', and then put the next value from the 'value' pattern into the 'name' key. If the source pattern specifies a value for the same name, the value from the source will be replaced with the new one.\
\pard\tx220\tx720\pardeftab560\li720\fi-720\ql\qnatural
\ls26\ilvl0
\b \cf0 {\listtext	\'95	}Padd(name, value, pattern):
\b0  After getting the next event, replace the 'name' value with its existing value + the next number from 'value'.\
\pard\tx220\tx720\pardeftab560\li720\fi-720\ql\qnatural
\ls27\ilvl0
\b \cf0 {\listtext	\'95	}Pmul(name, value, pattern):
\b0  After getting the next event, replace the 'name' value with its existing value * the next number from 'value'.\
}