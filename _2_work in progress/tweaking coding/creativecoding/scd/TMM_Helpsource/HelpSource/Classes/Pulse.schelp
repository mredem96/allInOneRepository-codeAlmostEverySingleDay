class:: Pulse
summary:: Band limited pulse wave.
related:: Classes/LFPulse
categories::  UGens>Generators>Deterministic


Description::

Band limited pulse wave generator with pulse width modulation.

one thing you can try to do with supercollider pulse ugen: is
creating several duplicate copies at a really low frequency, having a macro variable, to interpolate and detune a slickly little bit these frequencies, and fool around with pulse with modulation. when you apply these kinds of things, another really really cool thing you can do is layering several similar ugens with random variables, and different properties, in the exact same way you would do with  additive synthesis, or additive side chaining in the context of a sound mix.

classmethods::

method::ar

argument::freq

Frequency in Hertz.


argument::width

Pulse width ratio from zero to one. 0.5 makes a square wave.


argument::mul

Output will be multiplied by this value.


argument::add

This value will be added to the output.


Examples::

code::

// modulate frequency
~freqMod= { Pulse.ar(XLine.kr(40,4000,6),0.1, 0.2) !2};

// modulate pulse width
~pulseWMod={ Pulse.ar(200, Line.kr(0.01,0.99,8), 0.2) !2};

// two band limited square waves thru a resonant low pass filter
~complex = { RLPF.ar(Pulse.ar([100,250],0.5,0.1), XLine.kr(8000,400,5), 0.05) };

(
~try=
~trythis.free; ~trythis2.free;
~trythis = {[~freqMod, ~pulseWMod, ~complex].choose}.scope;
~trythis2 = {[~freqMod, ~pulseWMod, ~complex].choose}.scope
)

~trythis.free;
~trythis2.free;

// show time
{[Mix.new(Array.fill(10, {Pulse.ar([30,60], LFDNoise0.kr(LFDNoise0.kr(rrand(0.01, 10)).range(0.01, 10)), 0.3)})), Mix.new(Array.fill(10, {Pulse.ar([60, 30, 120].choose + rrand(-0.2, 0.2), [LFDNoise0, LFDNoise1, LFDNoise3].choose.kr([LFDNoise0, LFDNoise1, LFDNoise3].choose.kr(rrand(0.01, 10)).range(0.01, 10)), 0.3)}))]}.scope

// even cooler (stop and and evalutate several times to check different variations of the same base behaviour)
{[Mix.new(Array.fill(10, {Pulse.ar([30,60], LFDNoise0.kr(LFDNoise0.kr(rrand(0.01, 10)).range(0.01, 10)), 0.3)})) , Mix.new(Array.fill(10, {Pulse.ar([60, 30, 120].choose + rrand(-0.2, 0.2), [LFDNoise0, LFDNoise1, LFDNoise3].choose.kr([LFDNoise0, LFDNoise1, LFDNoise3].choose.kr(rrand(0.01, 10)).range(0.01, 10)), 0.3)})) * ChaosGen.allSubclasses.choose.ar(rrand(0.01, 30))]}.scope


::

