{\rtf1\ansi\ansicpg1253\cocoartf949\cocoasubrtf540
{\fonttbl\f0\fswiss\fcharset0 Optima-Regular;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue0;\red96\green96\blue96;
\red0\green0\blue191;\red0\green115\blue0;\red0\green0\blue255;}
\deftab560
\pard\pardeftab560\sa20\ql\qnatural

\f0\b\fs28 \cf2 /* 
\b0 \

\b\fs24 ==========================================================
\b0 \

\b\fs34 DX490a - Summer 2010
\b0 \

\fs26 		Instructor: Stelios Manousakis\

\b\fs24 ==========================================================
\b0 		\

\b\fs30 Class 2.1:
\b0 \

\b 	Server <-> language communication
\b0 \

\fs28 		Contents:\
			\'95 Open Sound Control\
			\'95 Client-Server communication\
			\'95 Sending messages from sclang to scsynth\
				- direct and indirect\
				- message bundles\
			\'95 Sending messages from scsynth to sclang\
				- Poll and .poll\
				- SendTrig\
				- SendReply\
				- Bus.control.get\

\b\fs24 ==========================================================
\b0 \

\b\fs28 */
\b0 \cf3 \
\
\
\pard\pardeftab560\ql\qnatural

\b \cf2 // ================= OPEN SOUND CONTROL (OSC) =================
\b0 \cf3 \
\cf2 // OSC is a communication protocol developed by Matthew Wright at CNMAT UC Berkley in 1998. It is optimized for networking technology, and has a client-server messaging architecture that uses a dynamic URL-style symbolic scheme, bundling messages that need to be sent simultaneously together. It is a very general protocol, initially developed for controlling digital sound and as a non-keyboard-centric successor of MIDI, but is currently used in many non-audio applications as well. The protocol is open, fast, efficient and flexible with up to 32-bits of resolution. You can create your own tags, and you can bundle messages together to ensure they are evaluated at the same time; a time-tag is also enclosed to control timed execution of messages precisely.\cf3 \
\cf2 // Have a look at the specifications of the protocol here:\cf3 \
\cf4 "open http://opensoundcontrol.org/spec-1_0"\cf3 .unixCmd \
\
\
\
\

\b \cf2 // ================= CLIENT-SERVER COMMUNICATION =================
\b0 \cf3 \
\cf2 // In SuperCollider the client 
\b sclang
\b0  (or any other client) requests and the server 
\b scsynth
\b0  provides information. The two applications communicate through a network. In the case of the SuperCollider application this network exists inside the same machine, but it is possible to connect remote machines on the same Local-Area-Network if you know their IP addresses, or through the internet, if you know their IP addresses and have access to a web server! All commands are received via TCP or UDP (networking protocols) using a simplified Open Sound Control (OSC) version. OSC is used to communicate both ways: sclang -> scsynth and scsynth -> sclang\cf3 \
\
\
\

\b \cf2 // ====== SENDING MESSAGES FROM SCLANG TO SCSYNTH ====== 
\b0 \cf3 \
\cf2 // sclang can send OSC messages to the server directly, or indirectly. \cf3 \
\cf2 // - 
\b Direct
\b0  communication involves sending raw OSC messages 'by hand', using the .sendMsg method of the server and other similar formats. This is the way in which other client applicationos need to communicate with the server as well, if one does not use sclang.\cf3 \
\
\cf2 // - 
\b Inderect
\b0  communication, or 
\i \cf2 object style
\i0 \cf2  communication is provided by numerous objects inside the language, which allow you to operate using a higher-level syntax, and take the responsibility of internally translating those messages to raw OSC data.\cf3 \
\
\cf2 // For example, having this SynthDef\cf3 \
s.boot;\
(\
\cf5 SynthDef\cf3 (\cf6 \\test\cf3 , \{\cf5 arg\cf3  outbus = 0, freq = 220;\
	\cf5 Out\cf3 .ar(outbus, \cf5 SinOsc\cf3 .ar(freq, 0, 0.25));\
\}).send(s)\
)\
\cf2 // the 
\b direct
\b0  method for creating an instance is:\cf3 \
s.sendMsg(\cf4 "/s_new"\cf3 , \cf6 \\test\cf3 , 100, 1, 0);\
	\cf2 //  100 is the node ID\cf3 \
	\cf2 // 1 is the action (0: addToHead, 1: addToTail)\cf3 \
	\cf2 // 0 is the 'target' ID\cf3 \
\cf2 // to change the frequency\cf3 \
s.sendMsg(\cf4 "/n_set"\cf3 , 100, \cf6 \\freq\cf3 , 200);\
\cf2 // to free the node:\cf3 \
s.sendMsg(\cf4 "/n_free"\cf3 , 100)\
\
\cf2 // 
\b indirect
\b0  methods are much easier, though add a slight overhead:\cf3 \
a = \cf5 Synth\cf3 (\cf6 \\test\cf3 ).play\
a.run(\cf5 false\cf3 ); \cf2 // stop it\cf3 \
a.run(\cf5 true\cf3 ); \cf2 // start again\cf3 \
a.set(\cf6 \\freq\cf3 , 200)\
a.free; \cf2 // free the server resources\cf3 \
\
\cf2 // \{\}.play is a very indirect method construct, creating a SynthDef for you and sending the appropriate messages to the Server\cf3 \
\{\cf5 SinOsc\cf3 .ar(220, 0, 0.25)\}.play\
\
\
\

\b \cf2 // ------ Message Bundles ------
\b0 \cf3 \
\cf2 // Timing is crucial in music, so many times it is very useful to bundle messages together to ensure timing\cf3 \
\
\cf5 SynthDef\cf3 (\cf6 \\sine\cf3 , \{\cf5 arg\cf3  outBus = 0, freq = 400, amp = 1, dur = 1;\
	\cf5 var\cf3  env, src;\
	env = \cf5 EnvGen\cf3 .kr(\cf5 Env\cf3 ([0, 1, 0], [0.5, 0.5], \cf6 \\sin\cf3 ), timeScale: dur, levelScale: amp, doneAction: 2);\
	src = \cf5 SinOsc\cf3 .ar(freq, 0, env);\
	\cf5 Out\cf3 .ar(outBus, \cf5 Pan2\cf3 .ar(src, \cf5 Rand\cf3 .new(-0.7, 0.7)));\
\}).send(s);\
\
s.sendMsg(\cf6 \\s_new\cf3 , \cf6 \\sine\cf3 , s.nextNodeID, 0, 1);\
s.sendBundle(1, [\cf6 \\s_new\cf3 , \cf6 \\sine\cf3 , s.nextNodeID, 0, 1]);\
\
(\
\cf5 var\cf3  basefreq = 400;\
s.sendBundle(0.1, \
[\cf6 \\s_new\cf3 , \cf6 \\sine\cf3 , s.nextNodeID, 0, 1, \cf6 \\freq\cf3 , basefreq, \cf6 \\dur\cf3 , 1, \cf6 \\amp\cf3 , 0.5],\
[\cf6 \\s_new\cf3 , \cf6 \\sine\cf3 , s.nextNodeID, 0, 1, \cf6 \\freq\cf3 , basefreq * 0.99, \cf6 \\dur\cf3 , 0.8, \cf6 \\amp\cf3 , 0.4],\
[\cf6 \\s_new\cf3 , \cf6 \\sine\cf3 , s.nextNodeID, 0, 1, \cf6 \\freq\cf3 , basefreq * 1.97, \cf6 \\dur\cf3 , 2, \cf6 \\amp\cf3 , 0.3],\
[\cf6 \\s_new\cf3 , \cf6 \\sine\cf3 , s.nextNodeID, 0, 1, \cf6 \\freq\cf3 , basefreq * 2.01, \cf6 \\dur\cf3 , 2.3, \cf6 \\amp\cf3 , 0.1],\
[\cf6 \\s_new\cf3 , \cf6 \\sine\cf3 , s.nextNodeID, 0, 1, \cf6 \\freq\cf3 , basefreq * 2.59, \cf6 \\dur\cf3 , 0.9, \cf6 \\amp\cf3 , 0.05],\
[\cf6 \\s_new\cf3 , \cf6 \\sine\cf3 , s.nextNodeID, 0, 1, \cf6 \\freq\cf3 , basefreq * 3.99, \cf6 \\dur\cf3 , 4.1, \cf6 \\amp\cf3 , 0.02]\
);\
)\
\
\
\cf2 /*\
 Have a look at these files:\
\pard\pardeftab560\sa20\ql\qnatural
\cf2 \ul \ulc2 [{\field{\*\fldinst{HYPERLINK "SC://NodeMessaging"}}{\fldrslt \cf7 \ulc7 NodeMessaging}}]\cf2 \ulnone \
\cf2 \ul \ulc2 [{\field{\*\fldinst{HYPERLINK "SC://Server-Command-Reference"}}{\fldrslt \cf7 \ulc7 Server-Command-Reference}}]
\b \cf2 \ulnone  
\b0 // a list of all server commands and their arguments\
\cf2 \ul \ulc2 [{\field{\*\fldinst{HYPERLINK "SC://bundledCommands"}}{\fldrslt \cf7 \ulc7 bundledCommands}}]\cf2 \ulnone  // on sending messages to the server together as a bundle\
*/\cf3 \
\pard\pardeftab560\ql\qnatural
\cf3 \
\

\b \cf2 // ====== SENDING MESSAGES FROM SCSYNTH TO SCLANG ====== 
\b0 \cf3 \
\cf2 // At times it can be very useful to know what happens inside a SynthDef. There are a few different ways to do that:\cf3 \
\

\b \cf2 // ------ 1| Poll UGen or .poll method  ------
\b0 \cf3 \
\cf2 // This UGen and method allows you to monitor things inside a SynthDef by printing values in the post window. This should only be used during programming for debugging, as it can add a considerable amount of overhead, especially if it's triggered very often.\cf3 \
s.boot;\
\{ {\field{\*\fldinst{HYPERLINK "SC://Poll"}}{\fldrslt \cf5 Poll}}.kr(\cf5 Impulse\cf3 .kr(10), \cf5 Line\cf3 .kr(0, 1, 1), \cf6 \\test\cf3 ) \}.play(s); \cf2 // the UGen\cf3 \
\{ \cf5 SinOsc\cf3 .ar(375, 0, 1).poll(\cf5 Impulse\cf3 .ar(20), \cf6 \\test2\cf3 ) \}.play(s); \cf2 // the method .poll can be called to all UGens\cf3 \
\
\

\b \cf2 // ------ 2| SendTrig UGen (for triggers) + OSCresponder ------
\b0 \cf3 \
\cf2 // Send a trigger message back to sclang, upon receiving a trigger. An OSCresponder (client-side network responder) has to be setup to receive the messages. Note that the OSCresponder's command-name has to be "/tr".\cf3 \
\
\{ {\field{\*\fldinst{HYPERLINK "SC://SendTrig"}}{\fldrslt \cf5 SendTrig}}.kr(\cf5 Impulse\cf3 .kr(1.0),0,0.9) \}.play;\
\cf2 // register to receive this message\cf3 \
(\
r = {\field{\*\fldinst{HYPERLINK "SC://OSCresponderNode"}}{\fldrslt \cf5 OSCresponderNode}}(s.addr,\cf6 '/tr'\cf3 ,\{ \cf5 arg\cf3  time, responder, msg;\
	\cf4 "bang!"\cf3 .postln;\
	[time,responder,msg].postln;\
\}).add\
);\
r.remove; \cf2 // don't forget to remove the responder once you're done\cf3 \
\
\

\b \cf2 // ------ 3| SendReply UGen (for values) + OSCresponder ------
\b0 \cf3 \
\cf2 // Same idea as SendTrig, except this time for floats, ints or arrays instead just triggers - and you need to provide a trigger UGen yourself. The OSCresponder's command-name is up to you to set.\cf3 \
\
\{{\field{\*\fldinst{HYPERLINK "SC://SendReply"}}{\fldrslt \cf5 SendReply}}.kr(\cf5 Impulse\cf3 .kr(1.0), \cf6 'the_answer'\cf3 , [40, 41, 42, 43] + \cf5 SinOsc\cf3 .kr, 1905)\}.play(s);\
\cf2 // register to receive this message\cf3 \
(\
r = {\field{\*\fldinst{HYPERLINK "SC://OSCresponderNode"}}{\fldrslt \cf5 \ul \ulc5 OSCresponderNode}}(\cf5 nil\cf3 , \cf6 'the_answer'\cf3 , \{ \cf5 |t, r, msg|\cf3  \
	\cf4 "received!"\cf3 .postln;\
	[t, r, msg].postln \}).add;\
)\
r.remove; \
\
\

\b \cf2 // ------ 4| Control Bus  .get ------
\b0 \cf3 \
\pard\pardeftab560\sa20\ql\qnatural
\cf2 // Lastly, you can query a control bus for its value with the .get method\cf3 \
\
a = \cf5 Bus\cf3 .control(s, 1); \cf2 // a single channel control bus on the default server\cf3 \
\pard\pardeftab560\ql\qnatural
\cf3 \{\cf5 Out\cf3 .kr(a, \cf5 LFSaw\cf3 .kr(0.1))\}.play; \cf2 // run a test synth\cf3 \
a.get(\{\cf5 arg\cf3  val; val.postln\}); \cf2 //ask for the bus' value from the language\cf3 \
\
\cf2 // If you look inside the source of the Bus class, you'll see that the .get method uses an OSCresponder:\cf3 \

\fs24 	get \{ \cf5 arg\cf3  action; \
		action = action ? \{ \cf5 |vals|\cf3  \cf4 "Bus % index: % values: %.\\n"\cf3 .postf(rate, index, vals); \};\
		\cf5 OSCpathResponder\cf3 (server.addr,[\cf6 '/c_set'\cf3 ,index], \{ \cf5 arg\cf3  time, r, msg;\
			action.value(msg.at(2)); r.remove \}).add;\
		server.listSendMsg([\cf4 "/c_get"\cf3 ,index]);\

\fs28 \cf2 // Note that there is an inherent latency involved in this process, as sclang asks scsynth for a value and then scsynth responds.\cf3 \
\
}