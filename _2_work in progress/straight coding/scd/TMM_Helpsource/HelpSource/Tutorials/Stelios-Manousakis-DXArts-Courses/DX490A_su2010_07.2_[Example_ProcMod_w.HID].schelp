{\rtf1\ansi\ansicpg1253\cocoartf949\cocoasubrtf540
{\fonttbl\f0\fswiss\fcharset0 Optima-Regular;\f1\fnil\fcharset0 LucidaGrande;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue0;\red0\green0\blue191;
\red0\green115\blue0;}
\deftab560
\pard\pardeftab560\sa20\ql\qnatural

\f0\b\fs28 \cf2 /* 
\b0 \

\b\fs24 ==========================================================
\b0 \

\b\fs34 DX490a - Summer 2010
\b0 \

\fs26 		Instructor: Stelios Manousakis\

\b\fs24 ==========================================================
\b0\fs26 		
\fs24 \

\b\fs30 Class 7.2:
\b0 \

\b 	A ProcMod & control mapping example
\b0 \

\fs28 		Contents:\
			\'95 A sound example\

\b\fs24 ==========================================================
\b0 \

\b\fs28 */
\b0 \cf3 \
\
\pard\pardeftab560\ql\qnatural

\b \cf2 // ================= PROCMOD WITH HID CONTROL =================
\b0 \cf3 \
\
\pard\pardeftab560\sa20\ql\qnatural
\cf2 // This example builds on example 7.1. The synthdef has been converted to a procmod, and a SpaceNavigator device is used to control the sound. The buttons turn the procmod on and off, and the 6 axes control various aspects of the synthesis.\cf3 \
\
(\
\cf2 // === \'95 Interfacing connections: ===\cf3 \
\cf2 // The first thing you need to do is look at the devices that are connected to your machine:\cf3 \
\cf4 GeneralHID\cf3 .buildDeviceList;\
\cf2 // You can make a list of the devices:\cf3 \
\pard\pardeftab560\ql\qnatural
\cf3 d = \cf4 GeneralHID\cf3 .deviceList;\
\cf2 // You then can pick a specific device  and open it for usage:\cf3 \
a = \cf4 GeneralHID\cf3 .open(d[2]); \cf2 // maybe you'd need to change that...\cf3 \
\pard\pardeftab560\sa20\ql\qnatural
\cf2 //// start the eventloop if its not running already:\cf3 \
\cf4 GeneralHID\cf3 .startEventLoop;\
\pard\pardeftab560\ql\qnatural
\cf2 //a.debug_(false)\cf3 \
\
\cf2 // === \'95 Sound synthesis ===\cf3 \
\cf2 // load a simple FM synth, no mapping inside the synth\cf3 \
~combfm = \cf4 CtkSynthDef\cf3 ( \cf5 \\combFM\cf3 , \{ \cf4 |outbus = 0, freq = 440, harm = 1, modix = 1, delay = 0.1, pan = 0, amp = 0.5, envbus, freqMul = 1|\cf3 \
	\cf4 var\cf3  car, mod, out, dev, modfreq;\
	freq = freq * freqMul;\
	modfreq = freq * harm;\
	dev = modix * modfreq;\
	mod = \cf4 SinOsc\cf3 .ar(modfreq, 0, dev);\
	car = \cf4 SinOsc\cf3 .ar(freq + (mod * modix));\
	out = \cf4 Out\cf3 .ar(outbus, (\cf4 Pan2\cf3 .ar(\cf4 CombC\cf3 .ar(car, 0.5, delay, 0.5), pan, amp) * \cf4 In\cf3 .kr(envbus)));
\f1 \uc0\u8232 
\f0 \});\
	\
	\
\cf2 /// === \'95 mapping stuff ===\cf3 \
\
\cf2 // create as many control buses as the parameters of the controlling interface\cf3 \
~ctrl = 6.collect(\{\cf4 CtkControl\cf3 .play\});\
\
\cf2 // create some envelopes to handle the parameter mapping as you wish\cf3 \
~panEnv = \cf4 Env\cf3 ([-1, 1], [1], \cf5 \\lin\cf3 );\
~ampEnv = \cf4 Env\cf3 ([0.001, 0.7], [1], 3);\
~modEnv = \cf4 Env\cf3 ([1, 50], [1], 2);\
~freqEnv = \cf4 Env\cf3 ([40, 3000], [1], 4);\
\cf2 //~cutEnv = Env([50, 8000], [1], 2);\cf3 \
~delEnv = \cf4 Env\cf3 ([0, 0.5], [1], 2);\
~harmEnv = \cf4 Env\cf3 ([0.1, 10], [1], 2);\
\
\cf2 // Name the device's controls:\cf3 \
a.add(\cf5 \\leftBtn\cf3 , [1, 1]);\
a.add(\cf5 \\rightBtn\cf3 , [1, 2]);\
a.add(\cf5 \\r_l_pan\cf3 , [3, 48]);\
a.add(\cf5 \\u_d_pan\cf3 , [3, 49]);\
a.add(\cf5 \\push_pull\cf3 , [3, 50]);\
a.add(\cf5 \\tilt\cf3 , [3, 51]);\
a.add(\cf5 \\spin\cf3 , [3, 52]);\
a.add(\cf5 \\roll\cf3 , [3, 53]);\
\
\cf2 // within each slot's action: fill the appropriate CtkControl bus with the values coming in from the device slot:\cf3 \
a[\cf5 \\r_l_pan\cf3 ].action_(\{\cf4 |val|\cf3  ~ctrl[0].set([~panEnv[val.value]])\});\
a[\cf5 \\u_d_pan\cf3 ].action_(\{\cf4 |val|\cf3  ~ctrl[1].set([~modEnv[val.value]])\});\
a[\cf5 \\push_pull\cf3 ].action_(\{\cf4 |val|\cf3  ~ctrl[2].set([~ampEnv[val.value]])\});\
a[\cf5 \\tilt\cf3 ].action_(\{\cf4 |val|\cf3  ~ctrl[3].set([~delEnv[val.value]])\});\
a[\cf5 \\spin\cf3 ].action_(\{\cf4 |val|\cf3  ~ctrl[4].set([~freqEnv[val.value]])\});\
a[\cf5 \\roll\cf3 ].action_(\{\cf4 |val|\cf3  ~ctrl[5].set([~harmEnv[val.value]])\});\
\
\cf2 // use the buttons to turn on/off the procmod\cf3 \
a[\cf5 \\leftBtn\cf3 ].action_(\{\cf4 |val|\cf3  if(val.value == 1, \{p.play; q.release\})\}); \cf2 // left button starts the procmod\cf3 \
a[\cf5 \\rightBtn\cf3 ].action_(\{\cf4 |val|\cf3  if(val.value == 1, \{q.play; p.release\})\}); \cf2 // right button stops it\cf3 \
\
\
\cf2 // === \'95 the procmod ===\cf3 \
p = \cf4 ProcMod\cf3 .new(\cf4 Env\cf3 ([0, 1, 0], [0.1, 3], \cf5 \\sin\cf3 , 1), id: \cf5 \\testHID\cf3 , server: s)\
.function_(\{\cf4 arg\cf3  group, envbus, server;\
	\cf4 var\cf3  note;\
	note = ~combfm.new(target:group)\
	.freqMul_(1)\
	.pan_(~ctrl[0]).modix_(~ctrl[1]).amp_(~ctrl[2]).delay_(~ctrl[3]).freq_(~ctrl[4]).harm_(~ctrl[5])\
	.envbus_(envbus).play;\
	\});\
\
\
\cf2 // === \'95 the procmod ===\cf3 \
q = \cf4 ProcMod\cf3 .new(\cf4 Env\cf3 ([0, 1, 0], [0.1, 3], \cf5 \\sin\cf3 , 1), id: \cf5 \\testHID\cf3 , server: s)\
.function_(\{\cf4 arg\cf3  group, envbus, server;\
	\cf4 var\cf3  note;\
	note = ~combfm.new(target:group)\
	.freqMul_(0.1)\
	.pan_(~ctrl[0]).modix_(~ctrl[1]).amp_(~ctrl[2]).delay_(~ctrl[3]).freq_(~ctrl[4]).harm_(~ctrl[5])\
	.envbus_(envbus).play;\
	\});\
)\
\
\
\
\cf2 /*\
LAB: Make one or more procmods with your own synthdefs, and control them in real-time with a device\
*/\cf3 \
\
}