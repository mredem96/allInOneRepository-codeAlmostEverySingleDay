classe:: WhiteNoise
sumário:: White noise.
relacionado:: classees/BrownNoise, classees/GrayNoise, classees/ClipNoise, classees/PinkNoise
categorias::  UGens>Generators>Stochastic


Descrição::

////////////////////////////////////////////////////////////

Gera ruúdi branco cujo espectro é igual à potência de todas as frequuências.
Particularmente útil quando nos encontramos a difundir campos com o TGrains ou com o Ugen, ou com outras aplicações onde se possa querer usar um campo difuso de som.
Particularly usef when using diffuse fields within TGrains or Warp1 UGen, or any other application where you may want to create a diffuse sound field

////////////////////////////////////////////////////////////

métodosdeclasse::

método::ar, kr

argumento::mul
A amplitude do output será multiplicada por este valor.

argumento::add
O presente valor será adicionado à amplitude do output

Exemplos::

código::

////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

(SynthDef("help-WhiteNoise", { arg out=0; Out.ar(out, WhiteNoise.ar(0.25))}).play;)
~noise = {WhiteNoise.ar(0.6)!2}.play

//verificar também
~noise = {[WhiteNoise, BrownNoise, GrayNoise, ClipNoise, PinkNoise].choose.ar(0.6)!2};

////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

{Mix.new(Array.fill(8, ~noise))}.play
(~noise.play; ~noise.play; ~noise.play; ~noise.play; ~noise.play; ~noise.play; ~noise.play; ~noise.play;)

////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

b = Buffer.read(s, Platform.resourceDir +/+ "sounds/a11wlk01-44_1.aiff");

////////////////////////////////////////////////////////////

(~grandemo=({TGrains.ar(numChannels: 2, trigger: Dust.kr(MouseY.kr(8,120,1)), bufnum: b, rate: 1, centerPos: MouseX.kr(0,BufDur.kr(b)) + TRand.kr(0, 0.01, clk), dur: 4 / MouseY.kr(8,120,1), pan: pan, amp: 0.1, interp: 2);}))

////////////////////////////////////////////////////////////

~buffer.play

////////////////////////////////////////////////////////////

{Array.fill(2, {WhiteNoise.ar(ChaosGen.allSubclassees.choose.ar(rrand(0.1, 30)))})}.scope

{Array.fill(2, {[WhiteNoise, BrownNoise, GrayNoise, ClipNoise, PinkNoise].choose.ar(ChaosGen.allSubclassees.choose.ar(rrand(0.1, 30)))})}.scope

////////////////////////////////////////////////////////////

::
