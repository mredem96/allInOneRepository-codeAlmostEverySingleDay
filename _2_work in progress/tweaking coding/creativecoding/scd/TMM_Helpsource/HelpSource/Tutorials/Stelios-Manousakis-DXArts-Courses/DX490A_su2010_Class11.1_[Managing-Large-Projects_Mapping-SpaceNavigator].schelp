title:: 11.1.DX490A_su2010_11_1_Managing_Large_Projects_Mapping_Space__Navgiator
summary:: Stelios-Manousakis-DXArts-Courses-490A
categories:: Tutorials>Stelios-Manousakis-DXArts-Courses-490A
related:: Tutorials/SteliosManousakisDXArtsCoursesDX490A/11-1-Managing-Large-Projects-Mapping-Space-Navgiator

code::
/*
==========================================================
DX490a - Summer 2010
		Instructor: Stelios Manousakis
==========================================================
Class 11.1:
	Managing large projects
		Contents:
			• Supplement: Interface mapping
==========================================================
*/


// This file is the mapping part of the instrument.
// The control interface for this example is the 3DConnexxion SpaceNavigator, but with the appropriate changes on this file (and only this file), it can work with any other interface.

// This file will be a function, as we need to be able to pass it the position of the device in the deviceList array


{
arg connection;
var device;

// === • Interfacing connections: ===

// hook up the device:
device = GeneralHID.open(connection);
// start the eventloop
GeneralHID.startEventLoop;


/// === • Mapping stuff ===

// create as many control buses as the parameters of the controlling interface
~ctrl = 6.collect({CtkControl.play});

// create some envelopes to handle the parameter mapping as you wish
~panEnv = Env([-1, 1], [1], \lin);
~ampEnv = Env([0.001, 0.7], [1], 3);
~modEnv = Env([1, 50], [1], 2);
~freqEnv = Env([40, 3000], [1], 4);
//~cutEnv = Env([50, 8000], [1], 2);
~delEnv = Env([0, 0.5], [1], 2);
~harmEnv = Env([0.1, 10], [1], 2);

// Name the device's controls:
device.add(\leftBtn, [1, 1]);
device.add(\rightBtn, [1, 2]);
device.add(\r_l_pan, [3, 48]);
device.add(\u_d_pan, [3, 49]);
device.add(\push_pull, [3, 50]);
device.add(\tilt, [3, 51]);
device.add(\spin, [3, 52]);
device.add(\roll, [3, 53]);

// within each slot's action: fill the appropriate CtkControl bus with the values coming in from the device slot:
device[\r_l_pan].action_({|val| ~ctrl[0].set([~panEnv[val.value]])});
device[\u_d_pan].action_({|val| ~ctrl[1].set([~modEnv[val.value]])});
device[\push_pull].action_({|val| ~ctrl[2].set([~ampEnv[val.value]])});
device[\tilt].action_({|val| ~ctrl[3].set([~delEnv[val.value]])});
device[\spin].action_({|val| ~ctrl[4].set([~freqEnv[val.value]])});
device[\roll].action_({|val| ~ctrl[5].set([~harmEnv[val.value]])});

// use the buttons to turn on/off the procmod
device[\leftBtn].action_({|val| if(val.value == 1, {~proc1.play; ~proc2.release})}); // left button starts the procmod
device[\rightBtn].action_({|val| if(val.value == 1, {~proc2.play; ~proc1.release})}); // right button stops it


"==========================".postln;
"The INTERFACE is loaded and ready to go!".postln;
"==========================".postln;
}
::