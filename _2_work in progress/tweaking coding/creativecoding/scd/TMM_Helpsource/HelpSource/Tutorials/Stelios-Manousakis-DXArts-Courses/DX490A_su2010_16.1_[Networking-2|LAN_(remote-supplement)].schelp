{\rtf1\ansi\ansicpg1253\cocoartf949\cocoasubrtf540
{\fonttbl\f0\fswiss\fcharset0 Optima-Regular;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue0;\red0\green0\blue191;
\red96\green96\blue96;\red0\green115\blue0;}
\deftab560
\pard\pardeftab560\sa20\ql\qnatural

\f0\b\fs28 \cf2 /* 
\b0 \

\b\fs24 ==========================================================
\b0 \

\b\fs34 DX490a - Summer 2010
\b0 \

\fs26 		Instructor: Stelios Manousakis\

\b\fs24 ==========================================================
\b0\fs26 		
\fs24 \

\b\fs30 Class 16.1:
\b0 \

\b 	Networking 2: Communication within a Local-Area-Network (LAN): SUPPLEMENT
\b0 \

\fs28 		Contents:\
			\'95 A simple example (remote computer)\
			\'95 An example with sound (remote computer)\

\b\fs24 ==========================================================
\b0 \

\b\fs28 */
\b0 \cf3 \
\
\pard\pardeftab560\ql\qnatural
\cf3 \

\b \cf2 // ================= REMOTE MACHINE 
\fs30 \cf2 SUPPLEMENT
\fs28 \cf2  =================
\b0 \cf3 \
\cf2 // This file is for use within the remote computer\cf3 \
\

\b \cf2 // ====== A SIMPLE EXAMPLE: REMOTE COMPUTER ======
\b0 \cf3 \
\
\cf2 // In this simple example, we will create a GUI interface with two knobs, one to send data to a remote machine, and one to receive.\cf3 \
\
\cf2 // 1. connecting:\cf3 \
~remoteComp = \cf4 NetAddr\cf3 (\cf5 "stm.local"\cf3 , 57120); \cf2 // replace the IP ("Tesla.local") with the IP or name of the machine you want to connect to\cf3 \
\
\cf2 // 2. making a responder for receiving\cf3 \
r = \cf4 OSCresponder\cf3 (~remoteComp, \cf6 'dxlab8'\cf3 , \{ \cf4 arg\cf3  time, resp, msg; \
	[time, msg[1]].postln;\
	\{~recKnob.value_(msg[1])\}.defer;\
	\}).add;\
\
\pard\pardeftab560\li1140\fi-1140\ql\qnatural
\cf3 \
\pard\pardeftab560\ql\qnatural
\cf2 // 3. Making a GUI window with a knob to send, and a knob to receive:\cf3 \
(\
\cf4 var\cf3  window = \cf4 Window\cf3 .new(\cf5 "Networking test"\cf3 ,\cf4 Rect\cf3 (318, 456, 400, 400)).front;\
~recKnob = \cf4 Knob\cf3 .new(window,\cf4 Rect\cf3 (175, 205, 217, 189))\
	.action_\{\cf4 |v|\cf3  \};\
~sendKnob = \cf4 Knob\cf3 .new(window,\cf4 Rect\cf3 (8, 11, 216, 188))\
	.action_\{\cf4 |v|\cf3  \
		~remoteComp.sendMsg(\cf6 'stmIncoming'\cf3 , v.value); \cf2 // << action: sending to remote machine\cf3 \
		\};\
\cf4 StaticText\cf3 .new(window,\cf4 Rect\cf3 (24, 333, 148, 50))\
	.string_(\cf5 "Receive some data -->>"\cf3 )\
	.action_\{\cf4 |v|\cf3  \};\
\cf4 StaticText\cf3 .new(window,\cf4 Rect\cf3 (229, 15, 130, 47))\
	.string_(\cf5 "<<-- Send some data"\cf3 )\
	.action_\{\cf4 |v|\cf3  \};\
)\
\pard\pardeftab560\li1140\fi-1140\ql\qnatural
\cf3 \
\cf2 /* Now, do the same in the remote machine, replacing in:\
1. the IP of the receiving machine to the IP of this one\
2. the cmdName of the OSCresponder to the name you're using in (3)\
3. Replace the name you're using in (3) with the name you use in (2)\
*/\cf3 \
\
\pard\pardeftab560\ql\qnatural
\cf2 // Don't forget to remove your responder once you're done!\cf3 \
r.remove\
\
\pard\pardeftab560\li1140\fi-1140\ql\qnatural
\cf3 	\
\
\
\pard\pardeftab560\ql\qnatural

\b \cf2 // ====== AN EXAMPLE WITH SOUND: REMOTE ======
\b0 \cf3 \
\cf2 // In this simple example, we will create the same GUI interface with two knobs, except this time the 'sending' knob will get data from analysis of the sound in the local machine, and will send the data to the remote machine to affect the synthesis there - and vice versa.\cf3 \
\
\cf2 // \'95 Synthesis: a self-phase-modulated Sinewave, with analysis to show how noisy it is:\cf3 \
\
s.boot;\
\
(\
~mult = 4;\
\cf2 // buffer for FFT \cf3 \
~buf = \cf4 Buffer\cf3 .alloc(s,2048,1); \
\cf2 // the synthdef\cf3 \
~fdbFM = \cf4 CtkSynthDef\cf3 (\cf6 \\fdbSine\cf3 , \{\cf4 arg\cf3  freq, fdbAmt, amp, pollFreq = 2, gate = 1;\
	\cf4 var\cf3  sine, mod, fdbIn, fdbOut, env, chain, flatness;\
	fdbIn = \cf4 LocalIn\cf3 .ar(1);\
	env = \cf4 EnvGen\cf3 .kr(\cf4 Env\cf3 .new([0.00001, 1, 1, 0.00001], [0.05, 0.9, 0.5], [\cf6 \\exp\cf3 , \cf6 \\sin\cf3 ], 1), gate,  doneAction: 2);\
	mod = fdbIn * fdbAmt;\
	sine = \cf4 SinOsc\cf3 .ar(freq, mod, amp); \cf2 // fdb phase modulation\cf3 \
	chain = \cf4 FFT\cf3 (~buf, sine);\
	flatness = \cf4 SpecFlatness\cf3 .kr(chain);\
	\cf4 SendReply\cf3 .kr(\cf4 Impulse\cf3 .kr(pollFreq), \cf6 'flatness'\cf3 , flatness);\
	\cf4 Out\cf3 .ar(0, sine * env);\
	fdbOut = \cf4 LocalOut\cf3 .ar(sine);\
\})\
);\
\
\cf2 // 1. connecting:\cf3 \
~remoteComp = \cf4 NetAddr\cf3 (\cf5 "stm.local"\cf3 , 57120); \cf2 // replace the IP ("Tesla.local") with the IP or name of the machine you want to connect to\cf3 \
\
\cf2 // 2. making a responder for receiving\cf3 \
r = \cf4 OSCresponder\cf3 (~remoteComp, \cf6 'dxlab8'\cf3 , \{ \cf4 arg\cf3  time, resp, msg; \
	[time, msg[1]].postln;\
	\{~recKnob.value_(msg[1])\}.defer;\
	~note.fdbAmt_(msg[1] * ~mult + 1)	\
	\}).add;\
\
\
\cf2 // 2a. making a responder for receiving from the analysis data from the synthdef, and moving the knob\cf3 \
~noisiness = \cf4 OSCresponder\cf3 (n, \cf6 'flatness'\cf3 , \{ \cf4 arg\cf3  time, resp, msg; \
	msg[3].postln;\
	\{~sendKnob.valueAction_(msg[3])\}.defer; \cf2 // naturally, it would be more efficient to send the message directly to the remote server, this is just for demonstration purposes...\cf3 \
	\}).add;\
\
\pard\pardeftab560\li1140\fi-1140\ql\qnatural
\cf3 \
\pard\pardeftab560\ql\qnatural
\cf2 // 3. Making a GUI window with a knob to send, and a knob to receive:\cf3 \
(\
\cf4 var\cf3  window = \cf4 Window\cf3 .new(\cf5 "Networking test"\cf3 ,\cf4 Rect\cf3 (318, 456, 400, 400)).front;\
~recKnob = \cf4 Knob\cf3 .new(window,\cf4 Rect\cf3 (175, 205, 217, 189))\
	.action_\{\cf4 |v|\cf3  \};\
~sendKnob = \cf4 Knob\cf3 .new(window,\cf4 Rect\cf3 (8, 11, 216, 188))\
	.action_\{\cf4 |v|\cf3  \
		~remoteComp.sendMsg(\cf6 'stmIncoming'\cf3 , v.value); \cf2 // << action: sending to remote machine\cf3 \
		\};\
\cf4 StaticText\cf3 .new(window,\cf4 Rect\cf3 (24, 333, 148, 50))\
	.string_(\cf5 "Receive some data -->>"\cf3 );\
\cf4 StaticText\cf3 .new(window,\cf4 Rect\cf3 (229, 15, 130, 47))\
	.string_(\cf5 "<<-- Send some data"\cf3 );\
)\
\
\
\
~note = ~fdbFM.new().freq_(160).fdbAmt_(3.5).amp_(0.5).play\
\cf2 // change some numbers\cf3 \
~note.freq_(124)\
~note.fdbAmt_(5.4)\
~note.fdbAmt_(1244)\
~mult = 4.6\
~note.pollFreq_(2.6)\
~note.release\
\
\cf2 // remove the responders\cf3 \
r.remove;\
~noisiness.remove; \
\
\pard\pardeftab560\li1140\fi-1140\ql\qnatural
\cf3 \
}