classe::AbstractFunction
summário::Um objecto que responde a um conjunto de mensagens que representam funções matemáticas
categorias::Core>Kernel
relacionado::Classes/UGen,Classes/Pattern,Classes/Function,Overviews/Operators

descrição::

Uma AbstractFunction é um objecto que responde a um conjunto de mensagens que representam
funções matemáticas. As subclasses sobrepoe-mse a um numero mais pequeno de mensages que respondem
a funções matemáticas.

O intuito reside em providenciar um mecanismo para que funções que não possam cacular valores directamente mas possam em vez disso compor estruturas para fazer cálculos (avaliação preguiçosa).

A função, os Padrões os Streams e o os UGen são subclasses de AbstractFuncton.
Por exemplo, se multiplicar dois UGens juntos pode receber respostas para devolver uma nova instância
da classe BinaryOpUgen que tem os dois operandos como inputs.

codigo::
{ var a, b; a = LFSaw.ar(220); b = LFPulse.ar(1442); [a, b, a * b] }.plot;
::

Para uma visão global de operadores comuns, ver o link::Overviews/Operators::, para especificar Exemplos, veja também, por exemplo, link::Classes/Functions::, link::Classes/UGen::, link::Classes/Pattern::.
Para ver que clsses implementam um método específico, ver que método é gerado pelo ligação::Overviews/Métodos:: overview.

métodosdeInstanciação::

subsecção::Mensagens Unárias

As seguintes mensagens devolvem um objecto que representa operação unárias com atraso, como por exemplo uma operação num objecto. Por exemplo, o valor reciproco de uma função irá resultar numa nova função que, quando chamada, devolve um valor recíproco da availação do operando.

Todas as seguintes mensagens enviam um mensagem composerUnaryOp para o receiver com uma mensagem unária como argumento.

ver link::Classes/FunçãodeOperadoresUnários::.

método::neg
códgio::
a = { 10.rand.postln }; b = a.neg; b.value;
// PPatterns, Streams, UGens, e Proxies também são AbstractFunctions:
a = Pgeom(1, 2, 5).neg; a.asStream.nextN(8);
{ a = LFNoise1.ar(1500); [a, a.neg] }.plot;
::
método::reciprocal
código::
a = { 10.rand.postln }; b = a.reciprocal; b.value;
a = Pgeom(1, 2, 5).reciprocal; a.asStream.nextN(8);
{ a = LFNoise1.ar(1500) + 2; [a, a.reciprocal] }.plot;
::
método::bitNot
Bitwise integer negation.
método::abs
Absolute value
código::
a = { 10.rand - 10.rand }; b = a.abs; b.value;
a = Pseries(3, -1.8, inf).abs; a.asStream.nextN(8);
{ a = LFNoise1.ar(1500); [a, a.abs] }.plot;
::
método::asFloat
código::
a = { "123.471".scramble }; b = a.asFloat; b.value;
::
método::asInt
código::
a = { "123471".scramble }; b = a.asInt; b.value;
::
método::ceil, floor, frac
código::
a = { 10.0.rand2.postln }; b = a.ceil; b.value;
a = { 10.0.rand2.postln }; b = a.floor; b.value;
a = Pgeom(1, 1.2, inf).ceil; a.asStream.nextN(8);
a = Pgeom(1, 1.2, inf).floor; a.asStream.nextN(8);
{ a = SinOsc.ar(150) * 1.5; [a, a.ceil, a.floor, a.frac] }.plot.superpose_(true);
::
método::sign
Returns a function that returns -1 if receiver returns a negative number, 1 if positive, and 0 if zero.
código::
a = { 10.0.rand2.postln }; b = a.sign; b.value;
{ a = LFNoise1.ar(1500) * 1.5; [a, a.sign] }.plot;
::
método::squared
código::
a = { |x| x + 1 }; b = a.squared; [a.value(1), b.value(1)];
a = Pseries(0, 1, inf).squared; a.asStream.nextN(8);
{ a = LFNoise1.ar(1500); [a, a.squared] }.plot;
::
método::cubed
código::
a = { |x| x + 1 }; b = a.cubed; [a.value(1), b.value(1)];
a = Pseries(0, 1, inf).cubed; a.asStream.nextN(8);
{ a = LFNoise1.ar(1500); [a, a.cubed] }.plot;
::
método::sqrt
código::
a = { |x| x + 1 }; b = a.sqrt; [a.value(1), b.value(1)];
a = Pseries(0, 1, inf).sqrt; a.asStream.nextN(8);
{ a = LFNoise1.ar(1500); [a, a.sqrt] }.plot;
::
método::exp
devvolve e elevado à potência disto.
código::
a = { |x| x + 1 }; b = a.exp; [a.value(1), b.value(1)];
a = Pseries(0, 0.25, inf).exp; a.asStream.nextN(8);
{ a = LFNoise1.ar(1500); [a, a.exp] }.plot;
::
método::midicps
Converte notas midi em ciclcos por segundo (Hz).
código::
a = { |x, root = 60| x + root }; b = a.midicps; [a.value(9), b.value(9)];
a = Pseries(60, 1, inf).midicps; a.asStream.nextN(12);
{ a = LFNoise1.ar(1) * 5 + 60; Pulse.ar(a.round.midicps) * 0.1 }.play;
::
método::cpsmidi
Converte ciclos por segundo (Hz), em notas midi.
código::
a = { |x| #[440, 720, 801, 1020.2].at(x) }; b = a.cpsmidi; [a.value(3), b.value(3)];
a = Pseries(220, 220, inf).cpsmidi; a.asStream.nextN(12); // série de overtones como notas midi
// devolve vores midi arredondados
{ a = Pitch.kr(SoundIn.ar).at(1); Pulse.ar(a.cpsmidi.round.midicps) * 0.1 }.play;
::
método::midiratio
método::ratiomidi
método::ampdb
método::dbamp
método::octcps
método::cpsoct
método::log
método::log2
método::log10
método::sin
método::cos
método::tan
método::asin
método::acos
método::atan
método::sinh
método::cosh
método::tanh
método::rand
método::rand2
método::linrand
método::bilinrand
método::sum3rand
método::distort
método::softclip
método::coin
método::even
método::odd
método::isPositive
método::isNegative
método::isStrictlyPositive
método::rho
método::theta

subsecção::Mensagens binárias

As seguintes mensagens devolvem um objecto que representa uma operação binária com atraso, por exemplo uma operação entre dois objecto. Por exemplo, adicionar duas função irá resultar numa nova função, que quando chamada, adiiciona o resulta da avaliação para os dois operandos.

todas as seguinte mensagens enviam uma mensagem composeBinaryOp, para o receiver com o
selector da mensagem binária e com o segundo operando como argumentos.
Ver: ligação::Classes/BinaryOpFunction::.


Exemplos:
código::
(
// a:
var x = { |x| x + 1000 } + { |x| x * 100 };
// Evaluate the result, passing in one argument:
x.value(2); // posts 1202
)
// either operand can be another object:
(
// Add two functions:
var x = 1871 + { |x| x * 12 };
x.value(12);
)
::
código::
(
// Add two UGens
{
 SinOsc.ar(440, 0, 0.2) + PinkNoise.ar(0.1);
}.play
)
::
// Add two Patterns
código::
(Pseq([1, 2, 3, 4]) + Prand([0, 0.1, -0.1], inf)).asStream.nextN(5);
::
// Add two NodeProxies
código::
Ndef(\x, { SinOsc.ar(440, 0, 0.2) });
Ndef(\y, { PinkNoise.ar(0.1) });
Ndef(\z, Ndef(\x) + Ndef(\y)).play;
::

método::+
código::
({ |x| x.squared } + 3).value(2);
::
método::-
código::
({ |x| x.squared } - 3).value(2);
::
método::*
código::
({ |x| x.squared } * { |x| x.squared }).value(2);
::
método::/
código::
({ |x| x.squared } / 4).value(2);
::
método::div
código::
({ |x| x.squared } div: 3).value(2);
::
método::%
código::
({ |x| x.squared } % 3).value(2);
::
método::**
código::
({ |x| x.squared } ** 3).value(2);
::
método::min
código::
({ |x| x.squared } min: 0).value(2);
::
método::max
código::
({ |x| x.squared } max: 0).value(2);
::
método::<
código::
({ |x| x.squared } < 3).value(2);
::
método::<=
código::
({ |x| x.squared } <= 3).value(2);
::
método::>
código::
({ |x| x.squared } > 3).value(2);
::
método::>=
código::
({ |x| x.squared } >= 3).value(2);
::
método::&
código::
a = { |min, max| ({ rrand(min, max) } ! 4).postln };
(a & a).value(0, 8);
::
método::|
código::
a = { |min, max| ({ rrand(min, max) } ! 4).postln };
(a | a).value(0, 8);
::
método::lcm
código::
a = { |min, max| rrand(min, max).postln };
(a lcm: a).value(0, 8);
::
método::gcd
código::
a = { |min, max| rrand(min, max).postln };
(a gcd: a).value(0, 8);
::
método::round
código::
a = { |max| max.rand.postln };
(a round: 0.5).value(1.0);
::
método::trunc
código::
a = { |max| max.rand.postln };
(a trunc: 2).value(10);
::
método::atan2
código::
a = { 1.0.rand2 };
a.atan2.dup(10);
::
método::hypot
código::
a = { 1.0.rand2 };
a.hypot.dup(10);
::
método::hypotApx
código::
a = { 1.0.rand2 };
a.hypotApx.dup(10);
::
método::>>
código::
a = { [2r10010, 2r101011, 2r11100].choose.postln };
b = a >> 2;
b.value.asBinaryDigits.join;
::
método::+>>
código::
a = { [2r10010, 2r101011, 2r11100].choose.postln };
b = a +>> 2;
b.value.asBinaryDigits.join;
::
método::ring1

(a * b) + a

código::
({ [5, 6, 2].choose.postln } ring1: { [2, -1, 3].choose.postln }).value

// UGens are also abstract functions
(
{ a = SinOsc.ar(335); b = SinOsc.ar(MouseX.kr(1, 1000, 1));
ring1(a, b) * 0.1 }.play;
)
::
método::ring2

((a*b) + a + b)

código::
({ [5, 6, 2].choose.postln } ring2: { [2, -1, 3].choose.postln }).value

(
{ a = SinOsc.ar(335); b = SinOsc.ar(MouseX.kr(1, 1000, 1));
ring2(a, b) * 0.1 }.play;
)
::
método::ring3

(a * a * b)

código::
({ [5, 6, 2].choose.postln } ring3: { [2, -1, 3].choose.postln }).value

(
{ a = SinOsc.ar(335); b = SinOsc.ar(MouseX.kr(1, 1000, 1));
ring3(a, b) * 0.1 }.play;
)
::
método::ring4

((a*a *b) - (a*b*b))

código::
({ [5, 6, 2].choose.postln } ring4: { [2, -1, 3].choose.postln }).value

(
{ a = SinOsc.ar(335); b = SinOsc.ar(MouseX.kr(1, 1000, 1));
ring4(a, b) * 0.1 }.play;
)
::
método::difsqr

(a*a) - (b*b)

código::
({ [5, 6, 2].choose.postln } difsqr: { [2, -1, 3].choose.postln }).value

(
{ a = SinOsc.ar(335); b = SinOsc.ar(MouseX.kr(1, 1000, 1));
difsqr(a, b) * 0.1 }.play;
)
::
método::sumsqr

(a*a) + (b*b)

código::
({ [5, 6, 2].choose.postln } sumsqr: { [2, -1, 3].choose.postln }).value

(
{ a = SinOsc.ar(335); b = SinOsc.ar(MouseX.kr(1, 1000, 1));
sumsqr(a, b) * 0.1 }.play;
)
::
método::sqrdif

(a - b) ** 2

código::
({ [5, 6, 2].choose.postln } sqrdif: { [2, -1, 3].choose.postln }).value

(
{ a = SinOsc.ar(335); b = SinOsc.ar(MouseX.kr(1, 1000, 1));
ring4(a, b) * 0.1 }.play;
)
::
método::sqrsum

(a + b) ** 2

código::
({ [5, 6, 2].choose.postln } sqrsum: { [2, -1, 3].choose.postln }).value

(
{ a = SinOsc.ar(335); b = SinOsc.ar(MouseX.kr(1, 1000, 1));
sqrsum(a, b) * 0.1 }.play;
)
::
método::absdif

(a - b).abs

código::
({ [5, 6, 2].choose.postln } absdif: { [2, -1, 3].choose.postln }).value

(
{ a = SinOsc.ar(335); b = SinOsc.ar(MouseX.kr(1, 1000, 1));
absdif(a, b) * 0.1 }.play;
)
::

método::moddif
absolute difference in modulo arithmetics.

método::amclip
0 when b <= 0, a*b when b > 0

método::scaleneg
a * b when a < 0, otherwise a.

método::clip2
clips receiver to +/- aNumber

método::excess
Returns the difference of the receiver and its clipped form.
método::<!
método::rrand
código::
a = { |x| sin(x) } rrand: { |x| sin(x) *  -1 };
(0..1000).normalize(0, 5pi).collect(a).plot;

(
{ a = SinOsc.ar(335); b = SinOsc.ar(MouseX.kr(1, 1000, 1));
rrand(a, b) * 0.1 }.play;
)
::
método::exprand
método::rotate
método::dist
método::bitAnd
método::bitOr
método::bitXor
método::bitHammingDistance
método::@

subsection:: Messages with more arguments (n-ary Operators)

The following messages return an object which represents a delayed n-ary operation, i.e. an operation between several objects (often three). For example, rescaling a function with linlin will result in a new function that, when called, scales the results of the evaluation of all operands.

All of the following messages send the message código::composeNAryOp:: to the receiver with the
binary message selector and the other operands as arguments.
See link::Classes/NAryOpFunction::.

método::clip
método::wrap
método::fold
método::blend
método::linlin
método::linexp
método::explin
método::expexp

subsection:: other

método::applyTo

Interface that allows us to combine selectors (Symbols) and Functions. Sends valueArray(args) to this.
discussion::
código::
// example:

f = [{ |a, b| a * b * 100.rand }, { |a, b| sin(a) * sin(b) }, '*', '/'];
f.choose.postcs.applyTo(3, 4);

// this is used in SequenceableCollection reduce:
(1..10).reduce('+');
(1..10).reduce({ |a, b| a * b * 1.0.rand });
::

método::asUGenInput

returns:: the result of sending the value(for) message to this.
discussion::
código::
// example:
(
var f, g, product;
f = { SinOsc.ar(400) };
g = { LFPulse.kr(8)  };
product = f * g * 0.1;
{ Pan2.ar(product, SinOsc.kr(0.3)) }.play;
)
::

método::sampled
Sample a function.
discussion::
código::
//sample a function
f = { |x| sin(3*x)*cos(8*x) }
f.plotGraph(from:0,to:2);
f.sampled(10,0,2).plotGraph(from:0,to:2);
f.sampled(80,0,2).plotGraph(from:0,to:2);

//on complicated functions a sampled function is less cpy heavy.
f = { |x| 60.collect{ 2**((x-rrand(0.0,1.0))) }.sum/60 };
f.plotGraph(from:0,to:1);
g = f.sampled(200);
g.plotGraph(from:0,to:1);
{ 200.collect{ f.(rand(0.0,1.0)) } }.bench;
{ 200.collect{ g.(rand(0.0,1.0)) } }.bench;
::

subsection::Function Composition

When unary, binary or n-ary operators are applied to an abstract function, it returns an object that represents
this operation, without evaluating the function: link::Classes/UnaryOpFunction::, link::Classes/BinaryOpFunction::, link::Classes/NAryOpFunction::.
Note that different subclasses like link::Classes/Pattern:: or link::Classes/UGen:: have their own composition scheme analogous to the one of AbstractFunction itself. For more about functions, see link::Classes/Function::.

código::
// compor uma função que devolva uma array com cumprmento variável
a = { |n| { 16.rand } ! n } <> { |x, y| rrand(4, 8) };
a.value;
// compor uma função ue seleccione apenas valores estranhos
b = { |x| x.select(_.odd) } <> a;
b.value;
::


Exemplos::

código::
// Exemplos

a = { 1.0.rand } + 8;
a.value;


y = { 8 } + { 1.0.rand };
y.value;
::

código::
// argumentos são passados em ambas as funções

y = { |x=0| x } + { 1.0.rand };
y.value(10);


y = { |x=0| x * 3 } + { |x=0| x + 1.0.rand };
y.value(10);

y.postcs;

y = { |x=0| x * 3 } + { |x=0| x + 1.0.rand } * { |x=0| [50, 100].choose + x } + 1.0;
y.value(10);
::

código::
// ambientes podem ser usados como um lookup para o valueEnvir:

(
Environment.use {
	~y = 10;
	~x = 2;
	~z = { |x=8| x } + { |y=0| y + 1.0.rand };
	~z.valueEnvir;
}
)
::

código::
// n-ary operators:

a = blend({ 3.0.rand }, { 1000.rand }, { |frac| frac });
a.value(0.5);

a.value((0, 0.06..1)); // creates a range of values..
::
